
/**
 * @addtogroup effects
 * @{
 */

/** Base class for other
*/
class CCGridBase : public CCObject
{

    /** whether or not the grid is active 
     *  @lua NA
     */
    bool isActive(void) ;
    /**
     *  @lua NA
     */
    void setActive(bool bActive);

    /** number of times that the grid will be reused 
     *  @lua NA
     */
    int getReuseGrid(void) ;
    /**
     *  @lua NA
     */
    void setReuseGrid(int nReuseGrid) ;

    /** size of the grid 
     *  @lua NA
     */
    CCSize getGridSize(void) ;
    /**
     *  @lua NA
     */
    void setGridSize(CCSize gridSize) ;

    /** pixels between the grids 
     *  @lua NA
     */
    CCPoint getStep(void) ;
    /**
     *  @lua NA
     */
    void setStep(CCPoint step) ;

    /** is texture flipped 
     * @lua NA
     */
    bool isTextureFlipped(void) ;
    /**
     *  @lua NA
     */
    void setTextureFlipped(bool bFlipped);
    /**
     *  @lua NA
     */
    bool initWithSize(CCSize gridSize, CCTexture2D *pTexture, bool bFlipped);
    /**
     *  @lua NA
     */
    bool initWithSize(CCSize gridSize);
    /**
     *  @lua NA
     */
    void beforeDraw(void);
    /**
     *  @lua NA
     */
    void afterDraw(CCNode *pTarget);


    /** create one Grid 
     * @lua NA
     */
    static CCGridBase* create(CCSize gridSize, CCTexture2D *texture, bool flipped);
    /** create one Grid 
     * @lua NA
     */
    static CCGridBase* create(CCSize gridSize);
    /**
     *  @lua NA
     */
    void set2DProjection(void);

};

/**
 CCGrid3D is a 3D grid implementation. Each vertex has 3 dimensions: x,y,z
 @js NA
 @lua NA
 */
class  CCGrid3D : public CCGridBase
{


    /** returns the vertex at a given position */
    ccVertex3F vertex(CCPoint pos);
    /** returns the original (non-transformed) vertex at a given position */
    ccVertex3F originalVertex(CCPoint pos);
    /** sets a new vertex at a given position */
    void setVertex(CCPoint pos, ccVertex3F vertex);



    /** create one Grid */
    static CCGrid3D* create(CCSize gridSize, CCTexture2D *pTexture, bool bFlipped);
    /** create one Grid */
    static CCGrid3D* create(CCSize gridSize);
    
};

/**
 CCTiledGrid3D is a 3D grid implementation. It differs from Grid3D in that
 the tiles can be separated from the grid.
 @js NA
 @lua NA
*/
class  CCTiledGrid3D : public CCGridBase


{



    /** returns the tile at the given position */
    ccQuad3 tile(CCPoint pos);
    /** returns the original tile (untransformed) at the given position */
    ccQuad3 originalTile(CCPoint pos);
    /** sets a new tile */
    void setTile(CCPoint pos, ccQuad3 coords);




    /** create one Grid */
    static CCTiledGrid3D* create(CCSize gridSize, CCTexture2D *pTexture, bool bFlipped);
    /** create one Grid */
    static CCTiledGrid3D* create(CCSize gridSize);
    
};

// end of effects group
/// @}